DCP - 13th Mar. 2023 7AM - 9AM IST
	
#######
DAY-1
#######

	Introduction to DevOps!
	
	DevOps!!!!		Is a software development strategies 

		Applications ::
			Desktop Applications	--> Create a billing system for retail shop
			Web Applications
			Mobile Applications
	
	SDLC ??? Software Development LifeCycle ???
	
	Requirement Analysis 
	Design Documents
	Development/Coding
	Testing 
	Deployed to Prod.
	Monitor...
	
	Waterfall Model -- Linear in fashion.  Create a billing system for retail shop  6month
	
		1.Requirement Analysis 
		2.Design Documents
		3.Development/Coding
		Testing 
		Deployed to Prod.
		Monitor...
	
	Complete Application :
		Monolith Application Architecture --> Tightly coupled.

Module 1: developed --> Unit level testing ==> Integrated to Higher Environments ==> Finally Released to Production

Module 2: developed --> Unit level testing ==> Integrated to Higher Environments ==> Finally Released to Production


Create a New Change Request1 :

		Requirement Analysis 
		Design Documents
		Development/Coding
		Testing 
		Deployed to Prod.
		Monitor...
		
Create a New Change Request2 :

		Requirement Analysis 
		Design Documents
		Development/Coding
		Testing 
		Deployed to Prod.
		Monitor...
		
Agile Methodologies!

	Application ::: Modules --> Iterations.
	
Create Module/Iteration1 :

		Requirement Analysis 
		Design Documents
		Development/Coding
		Testing 
		Deployed to Prod.
		Monitor...
		
Create Module/Iteration2 :

		Requirement Analysis 
		Design Documents
		Development/Coding
		Testing 
		Deployed to Prod.
		Monitor...

Create Module/Iteration3 :

		Requirement Analysis 
		Design Documents
		Development/Coding
		Testing 
		Deployed to Prod.
		Monitor...
	
Create Module/Iteration4 :

		Requirement Analysis 
		Design Documents
		Development/Coding
		Testing 
		Deployed to Prod.
		Monitor...
		
	Independently develop and Test the changes ===> 
	
	Continuous Integration  --> Continuous Delivery 
	

Who are all involved in the process :::

	- Developers
	- Tester
	- Business Analyst
	- Quality Team
	- Security Team
	- Deployment Team 
	
	
	- Business Analyst 
	- App/Dev Team - Appln. Owner/Leads/Architect
		Developers 
	- Testing Team 					How much time they take to complete the testing ???
	- Production Support Team
	- Monitoring Team 
	- Release Management Team 
	- Security Team 
	
	Non-Prod Environment							PROD Environment
	
		Dev (Developer) 
		Test (Testing Team)
			QA
			UAT
			Pre-Prod / Staging			===>			Prod
	
	On-Premises				<cloud Adoption>		 Cloud Environment
	
		Application Modernization
		Legacy Modernization
	

DevOps :: 

	Continuous Integration  --> Continuous Delivery --> Continuous Deployment
	
	DevOps Team ---> 

	Environment							
	
		Dev (Developer) 		Java web application 	--> build(Compile and create artifacts(binaries- *.war/*.jar) 
														--> Perform Unit Testing 
														--> promote the code to testing Team
		Test (Testing Team)
			QA
			UAT			User Acceptance Testing -->> Validate --> Business Users
			Pre-Prod / Staging		
		( )	
		Prod 
	
	
	
DevOps Stages :::

	Continuous Development 		--> Tools -- IDE - Eclipse based IDEs / VS Code -- Integrate the code
	Continuous Integration		--> promote the code to testing Team
	Continuous Testing			--> Automated testing & notifications 
	Continuous Delivery/Deployment -->
			Delivery 	--> Expects Manual Approval before PROD Release
			Deployment 	--> No need for any Manual Approvals before prod release
	Continuous Monitoring 
	
	Non-Prod				<<<<<<----->>>>>> 	PROD
	
	Identify all the possible issues at the very early stage and fix it.
	
	
Security ::

	DevSecOps
	
Application ::

Banking!!!!

	On-Banking! 
	
		Downtime -- Production Deployment Window --> 4 - 6hrs. 
		
Online - E-Commerce  / Facebook 


	Monolith Application Architecture ::
		Modules/Task/Iteration
	
	Micro-Service Based Application Architecture :::
		Services
	
www.amazon.com 

	Sign-up		-- Micro-Service1 - Developer1 - create, test, integrate to QA/UAT --> Release to PROD
	Sign-in 	-- Micro-Service2 - Developer2 - create, test, integrate to QA/UAT --> Release to PROD
	Search		-- Micro-Service3 - Developer3 - create, test, integrate to QA/UAT --> Release to PROD
	Add to Cart 
	Place the order 
	payment 
	confirm
	tracking 
	
Next :
	Create AWS Account 
	Access to Lab 
	
	
#######
DAY-2
#######
		Various DevOps Tools & its features.
		Access the Lab, Class Notes
		AWS - Free tier account 
			Create EC2 Instances ....
			
		DevOps is all about : 
		
			People		
			Process
			Tools 

Telecomm ::

	Service Provider1 --> introduce a new offer --> DEV, OPS --> Customers ASAP
	Service Provider2 -->>>
	
		Detailed Assessment ::
		Assessment Report & Recommendations!
		Implementation 
		
	- Developers
	- Tester
	- Business Analyst
	- Quality Team
	- Security Team
	- Deployment Team 
	
	
	- Business Analyst 
	- App/Dev Team - Appln. Owner/Leads/Architect
		Developers 
	- Testing Team 					How much time they take to complete the testing ???
	- Production Support Team
	- Monitoring Team 
	- Release Management Team 
	- Security Team 
	
	
	DevOps ---> DevSecOps ---> SRE --> GITOps ---> AIOps 
	
	Continuous Development 		--> Tools -- IDE - Eclipse based IDEs / VS Code -- Integrate the code
	Continuous Integration		--> promote the code to testing Team
	Continuous Testing			--> Automated testing & notifications 
	Continuous Delivery/Deployment -->
			Delivery 	--> Expects Manual Approval before PROD Release
			Deployment 	--> No need for any Manual Approvals before prod release
	Continuous Monitoring 


		Continuous Improvement!!!!!
	

	Tools ::::
	
		AWS 
		
		AZ 
	
	
	Plan ::: ALM Tools - Application LifeCycle Management Tools 
		JIRA
		AZ Board
	
	Code ::: 	Eclipse Based IDE, GIT Development Team ==> JAVA, Python, NodeJS, Angualar, .Net 
				Visual Studio Code
					shell Scripts, Groovy, Python, yaml scripts 
					
				Python Scripting ==> AWS ==> AWS CLI ,, AZ 
	
	Build ::: Jenkins -->
	
	Monitor :: Prometheus & Grafana 
	
		Application Monitoring 					==> AppDynamics
		Infra-Structure Monitoring 	Memory,CPU, ==> Prometheus & Grafana 
	
	
	Infra-Pipeline :
	Automate Infra Provisioning ---> Configure the server 
	
	
	Build & Test 
	
	Pipeline ::
	
		Build ---> Infra-pipeline ---> Test 
		
		
				Build ---> Automate Infra Provisioning ---> Configure the server  ---> Test
				
	Create any automation script / Pipeline : --> It shd be generic and reusable.
	
	
	Jenkins --> Build Orchestration Tool 
	
	Kubernetes --> Container Orchestration Tool
	
	Java Application --> MAVEN/ANT/GRADLE - Build Tools 
	

		
	Java Appln. 
	
	Retails :::
	
	On-Premises  	===> 	Cloud 
	
	Migration1
	
	DevOps Implementation
		Assessment !
			Team
			Create policies/Stragies 
			Tools 
		DevOps Team ::
			GIT 			2 resources Repo Mgmt 
			Jenkins 
			Ansible
			Docker/Kubernetes
		Onboard the Applications to DevOps 
			PoC Appln. 
			VersionOne,JIRA,AzBoard
			
		Onboard -- Appln.
		
			DEV --> Test Release
		
		CICD Pipeline :
		
			Build -- create artifacts 
			deploy the appln. to test envi.
			automated testing 
			feedback will be sent to the users 
			Dployed to prod .
			
		JIRA --> 
	
		Cloud Adoption ::: 
	

	
		Access the Lab, Class Notes
		AWS - Free tier account 
		Create EC2 Instances ....
		
		
	Today :::
	
		-> Create Github Account 		- Remote Repository to maintain the files and folders 
		-> Create AWS Free Tier Account 
		

#######
DAY-3
#######

		Version Control System using GIT. 
		
			Developer --> 
				Dev tools :::
					Code Editor 
					
					Eclipse based IDEs like Visual studio Code, IntelliJ, MS Visual Studio
					
					java 
					html
					jsp
					.net
					c#
					python 
					
		save the program!!!
		
		index.jsp 
			---
			-
			-
			-
			-
			-
			-
			---
			
		index.jsp 
			---
			-
			-
			-
			-fadasdf
			-
			-
			---	
			asdfasdf
			
			asdfasdfdf
			sdf
			
			
		Version Control System.
			Save the files 
			version control it.
			to track the changes 
			
		GITHUB.
		
		Remote Repo. 
		
			index.jsp 
				---> index.jsp_v1.0 (tag/Commit_ID)  10-lines
				---> index.jsp_v1.1 +20 lines
				---> index.jsp_v1.2 -05 lines
				---> index.jsp_v1.3
				---> index.jsp_v1.4
				---> index.jsp_v1.5
				
	Deployment ::: appln.version_v1.12
	
		Deployment window for PROD ::
			4 hr - 6 hrs 
				appln.version_v1.13
				
	How to version control the files/Changes ??
	
			GIT 
			
	
	Developer1 ::: Webappln.
	
		java web application :
		
		Java_Project : (Project Folder)
		
			
		Local VCS :::
		
		Centralized VCS ::: --> Google docs -
		
		Distributed VCS ::: (GIT)
		
		
		
		Local Repository							Remote Repository
		
		
		Git File Workflow
		How to effectively do parallel development
			Git Branches
			Git Branching Strategies
		Git Commands -- used in day-to-day activities
		How to Handle Local and Remote Repositories.
		
			- Git is Distributed Version Control System
			- Used to version control the source code/files 
			- Used to Track the Changes 
				Who? when? In file?
			- Used to perform parallel Development.
			
		
		index.html 
		--
		--
		-- 
		commit --> index.html_v1.0
		--
		---
		-
		-----
		--
		commit --> index.html_v1.1		

		- GIT is Open-source	

	
		GIT Workflow:
		
		
		Local Repo.(Local Machine)													Remote Repo.
		
		repository is a collection of files and folders 
		
		index.jsp 
			git add >>> Staging Area
									git commit >>> Local Repo.
									
																>>> Git push
																
		Local Repo.(Local Machine)			staging 		local repo
		Project1 
		
			f1.html
			f2,f3,f4,f5,f6						f6			f6	
		
		
		
		folder1 ==> .git 
		
		working dir. 
		
		git clone			--> Used to clone/copy the remote repo into local repo 
		
		git add 			--> add the changes from working dir to staging area 
		
		git commit 			--> commit the changes to local repo from stagin area  
		
		git push 			--> push the changes from local repo to remote repo.
		
		git fetch 		 fetch 	
			--> used to check if there are any incremental changes happened in repo.
									if there is any changes available, it jus updates the local repo.
		checkout/merge 
		git pull 		fetch + merge 
		
			--> used to check if there are any incremental changes happened in repo and to updates the changes with the working dir.
			
		clone vs fetch vs pull 
		
		clone vs fork ??
		
		fork 	--> used to copy the remote repositories 
		
		source remote repo			==> 	target remote repo 
		
		Remote Repository :::::
		
		clone 
		
		
		Repositories !
			
		GIT vs GITHUB
		
		
		Remote Repositories :::
		
			Github
			Gitlab
			Bitbucket
			AZ Repo
			AWS Repo 
			
			GIT Remote 
			
			VM's -- GIT client 
			
			git
		
		Appln. Program:
		
		5 funcs 
		
			func()
			{adfasd
			adfasdasd
			fsdf
			asdfasdff
			asdfasdfdfsadf
			}
			
			func1()
			{adfasd
			adfasdasd
			fsdf
			asdfasdff
			asdfasdfdfsadf
			}		
		
		Install GIT ::::
			Windows :::
				GIT BASH			--> CUI
				GIT GUI				--> 
				
		Windows ::
		
			SSH Client is to to connect to the remote servers 
				MobaXterm for windows
				Putty
			Terminal 
		
